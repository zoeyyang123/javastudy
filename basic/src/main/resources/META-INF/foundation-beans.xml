<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xmlns:cache="http://www.springframework.org/schema/cache" xmlns:util="http://www.springframework.org/schema/util"
       xmlns:task="http://www.springframework.org/schema/task"

       xsi:schemaLocation="
       http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
       http://www.springframework.org/schema/context
 	   http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/jee 
       http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
       http://www.springframework.org/schema/jdbc
       http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
       http://www.springframework.org/schema/aop 
       http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
       http://www.springframework.org/schema/data/jpa
       http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
       http://www.springframework.org/schema/rabbit
       http://www.springframework.org/schema/rabbit/spring-rabbit-1.3.xsd
       http://www.springframework.org/schema/cache
       http://www.springframework.org/schema/cache/spring-cache.xsd
       http://www.springframework.org/schema/util
       http://www.springframework.org/schema/util/spring-util-3.1.xsd
       http://www.springframework.org/schema/task 
       http://www.springframework.org/schema/task/spring-task-3.0.xsd">
       
    <context:spring-configured />

    <import resource="classpath:META-INF/i18n-resource.xml"/>
    <!--<import resource="classpath:META-INF/redis.xml" />-->

    <!-- 开启@AspectJ AOP代理 -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!-- 任务调度器 -->
    <task:scheduler id="scheduler" pool-size="10"/>

    <!-- 任务执行器 -->
    <task:executor id="executor" pool-size="5-25" queue-capacity="100"/>

    <!--开启注解调度支持 @Async @Scheduled-->
    <task:annotation-driven executor="executor" scheduler="scheduler" proxy-target-class="true"/>

    <!-- 名字必须是applicationEventMulticaster和messageSource是一样的，默认找这个名字的对象 -->
    <!-- 名字必须是applicationEventMulticaster，因为AbstractApplicationContext默认找个 -->
    <!-- 如果找不到就new一个，但不是异步调用而是同步调用 -->
    <bean id="applicationEventMulticaster" class="org.springframework.context.event.SimpleApplicationEventMulticaster">
        <!-- 注入任务执行器 这样就实现了异步调用（缺点是全局的，要么全部异步，要么全部同步（删除这个属性即是同步））  -->
        <property name="taskExecutor" ref="executor"/>
    </bean>

    <!-- 以下精确扫描，加快系统启动速度 -->
    <jpa:repositories base-package="insurance" />

    <context:component-scan base-package="insurance" />

	<bean id="standardPasswordEncoder" class="org.springframework.security.crypto.password.StandardPasswordEncoder" >
    <!-- sha-256 加密密钥，请勿随意更改，会使之前所有密码失效 -->
    	<constructor-arg value="7DivfNa"></constructor-arg>
    </bean>

    <!--
    <context:property-placeholder location="classpath:system.properties"/>
    -->


   <cache:annotation-driven/>

    <bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">
        <property name="caches">
            <set>
                <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"
                      p:name="default" />

                <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"
                      p:name="product" />

                <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"
                      p:name="ratetable" />

                <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"
                      p:name="factor" />

                <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"
                      p:name="user" />

                <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"
                      p:name="role" />

                <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"
                      p:name="permission" />

                <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"
                      p:name="passwordRetry" />

            </set>
        </property>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
    </bean>

    <bean id="entityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="packagesToScan" value="insurance"></property>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
        </property>
        <property name="jpaPropertyMap">
            <props>
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.archive.autodetection" />
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
            </props>
        </property>
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource" />
    </bean>
    
    <beans profile="mysql">
        <bean id="abstractDatasource" abstract="true" class="com.mchange.v2.c3p0.ComboPooledDataSource">
            <property name="driverClass">
                <value>com.mysql.jdbc.Driver</value>
            </property>
            <property name="automaticTestTable" value="test_timeout"/>
            <!-- 隔多少秒检查所有连接池中的空闲时间 -->
            <property name="idleConnectionTestPeriod" value="60"/>
			<!-- 最大空闲时间，超过空闲时间的连接将被丢弃 -->
            <property name="maxIdleTime" value="1800"/>
            <!-- 初始化连接池数量 -->
            <property name="initialPoolSize" value="10"/>
            <!-- 最小连接池数量 -->
            <property name="minPoolSize" value="10"/>
            <!-- 最大连接池数量 -->
            <property name="maxPoolSize" value="50"/>
            <!-- 当连接池连接用完时，C3PO一次性创建新连接的数据 -->
            <property name="acquireIncrement" value="10"/>
            <!-- 数据源内加载的PreparedStatement数量 -->
            <property name="maxStatements" value="200" />
            <!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的
　　          时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable
　　          等方法来提升连接测试的性能。Default: false -->
            <property name="testConnectionOnCheckout" value="false"/>
            <!--如果设为true那么在取得连接的同时将校验连接的有效性。Default: false -->
            <property name="testConnectionOnCheckin" value="true"/>
        </bean>
        
        <bean id="dataSource" parent="abstractDatasource"
            p:jdbcUrl="${dataSource.mysql.url}" p:user="${dataSource.mysql.username}" p:password="${dataSource.mysql.password}">
            <!-- 最小连接池数量 -->
            <property name="minPoolSize" value="3"/>
            <!-- 初始化连接池数量 -->
            <property name="initialPoolSize" value="3"/>
        </bean>



    </beans>


</beans>